// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_ASSETS_HOPE_ASSET_FBS_H_
#define FLATBUFFERS_GENERATED_ASSETS_HOPE_ASSET_FBS_H_

#include "flatbuffers/flatbuffers.h"


namespace hope {
namespace asset {
namespace fbs {

struct Asset;
struct Assets;

struct Asset FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  const flatbuffers::String *identifier() const { return GetPointer<const flatbuffers::String *>(4); }
  int32_t position() const { return GetField<int32_t>(6, 0); }
  int32_t size() const { return GetField<int32_t>(8, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* identifier */) &&
           verifier.Verify(identifier()) &&
           VerifyField<int32_t>(verifier, 6 /* position */) &&
           VerifyField<int32_t>(verifier, 8 /* size */) &&
           verifier.EndTable();
  }
};

struct AssetBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_identifier(flatbuffers::Offset<flatbuffers::String> identifier) { fbb_.AddOffset(4, identifier); }
  void add_position(int32_t position) { fbb_.AddElement<int32_t>(6, position, 0); }
  void add_size(int32_t size) { fbb_.AddElement<int32_t>(8, size, 0); }
  AssetBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  AssetBuilder &operator=(const AssetBuilder &);
  flatbuffers::Offset<Asset> Finish() {
    auto o = flatbuffers::Offset<Asset>(fbb_.EndTable(start_, 3));
    return o;
  }
};

inline flatbuffers::Offset<Asset> CreateAsset(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::String> identifier = 0,
   int32_t position = 0,
   int32_t size = 0) {
  AssetBuilder builder_(_fbb);
  builder_.add_size(size);
  builder_.add_position(position);
  builder_.add_identifier(identifier);
  return builder_.Finish();
}

struct Assets FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  const flatbuffers::Vector<flatbuffers::Offset<Asset>> *assets() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<Asset>> *>(4); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* assets */) &&
           verifier.Verify(assets()) &&
           verifier.VerifyVectorOfTables(assets()) &&
           verifier.EndTable();
  }
};

struct AssetsBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_assets(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Asset>>> assets) { fbb_.AddOffset(4, assets); }
  AssetsBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  AssetsBuilder &operator=(const AssetsBuilder &);
  flatbuffers::Offset<Assets> Finish() {
    auto o = flatbuffers::Offset<Assets>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<Assets> CreateAssets(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Asset>>> assets = 0) {
  AssetsBuilder builder_(_fbb);
  builder_.add_assets(assets);
  return builder_.Finish();
}

inline const Assets *GetAssets(const void *buf) { return flatbuffers::GetRoot<Assets>(buf); }

inline bool VerifyAssetsBuffer(flatbuffers::Verifier &verifier) { return verifier.VerifyBuffer<Assets>(); }

inline void FinishAssetsBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<Assets> root) { fbb.Finish(root); }

}  // namespace fbs
}  // namespace asset
}  // namespace hope

#endif  // FLATBUFFERS_GENERATED_ASSETS_HOPE_ASSET_FBS_H_
