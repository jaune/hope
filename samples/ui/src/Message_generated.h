// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_MESSAGE_HOPE_SAMPLES_UI_FBS_H_
#define FLATBUFFERS_GENERATED_MESSAGE_HOPE_SAMPLES_UI_FBS_H_

#include "flatbuffers/flatbuffers.h"


namespace hope {
namespace samples {
namespace ui {
namespace fbs {

struct Storage_SetRequestCommand;
struct Message;

enum Command {
  Command_NONE = 0,
  Command_Storage_SetRequestCommand = 1
};

inline const char **EnumNamesCommand() {
  static const char *names[] = { "NONE", "Storage_SetRequestCommand", nullptr };
  return names;
}

inline const char *EnumNameCommand(Command e) { return EnumNamesCommand()[e]; }

inline bool VerifyCommand(flatbuffers::Verifier &verifier, const void *union_obj, Command type);

struct Storage_SetRequestCommand FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  int32_t storage_id() const { return GetField<int32_t>(4, 0); }
  int32_t item_id() const { return GetField<int32_t>(6, 0); }
  int32_t request() const { return GetField<int32_t>(8, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, 4 /* storage_id */) &&
           VerifyField<int32_t>(verifier, 6 /* item_id */) &&
           VerifyField<int32_t>(verifier, 8 /* request */) &&
           verifier.EndTable();
  }
};

struct Storage_SetRequestCommandBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_storage_id(int32_t storage_id) { fbb_.AddElement<int32_t>(4, storage_id, 0); }
  void add_item_id(int32_t item_id) { fbb_.AddElement<int32_t>(6, item_id, 0); }
  void add_request(int32_t request) { fbb_.AddElement<int32_t>(8, request, 0); }
  Storage_SetRequestCommandBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  Storage_SetRequestCommandBuilder &operator=(const Storage_SetRequestCommandBuilder &);
  flatbuffers::Offset<Storage_SetRequestCommand> Finish() {
    auto o = flatbuffers::Offset<Storage_SetRequestCommand>(fbb_.EndTable(start_, 3));
    return o;
  }
};

inline flatbuffers::Offset<Storage_SetRequestCommand> CreateStorage_SetRequestCommand(flatbuffers::FlatBufferBuilder &_fbb,
   int32_t storage_id = 0,
   int32_t item_id = 0,
   int32_t request = 0) {
  Storage_SetRequestCommandBuilder builder_(_fbb);
  builder_.add_request(request);
  builder_.add_item_id(item_id);
  builder_.add_storage_id(storage_id);
  return builder_.Finish();
}

struct Message FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  int32_t sender_id() const { return GetField<int32_t>(4, 0); }
  Command command_type() const { return static_cast<Command>(GetField<uint8_t>(6, 0)); }
  const void *command() const { return GetPointer<const void *>(8); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, 4 /* sender_id */) &&
           VerifyField<uint8_t>(verifier, 6 /* command_type */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 8 /* command */) &&
           VerifyCommand(verifier, command(), command_type()) &&
           verifier.EndTable();
  }
};

struct MessageBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_sender_id(int32_t sender_id) { fbb_.AddElement<int32_t>(4, sender_id, 0); }
  void add_command_type(Command command_type) { fbb_.AddElement<uint8_t>(6, static_cast<uint8_t>(command_type), 0); }
  void add_command(flatbuffers::Offset<void> command) { fbb_.AddOffset(8, command); }
  MessageBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  MessageBuilder &operator=(const MessageBuilder &);
  flatbuffers::Offset<Message> Finish() {
    auto o = flatbuffers::Offset<Message>(fbb_.EndTable(start_, 3));
    return o;
  }
};

inline flatbuffers::Offset<Message> CreateMessage(flatbuffers::FlatBufferBuilder &_fbb,
   int32_t sender_id = 0,
   Command command_type = Command_NONE,
   flatbuffers::Offset<void> command = 0) {
  MessageBuilder builder_(_fbb);
  builder_.add_command(command);
  builder_.add_sender_id(sender_id);
  builder_.add_command_type(command_type);
  return builder_.Finish();
}

inline bool VerifyCommand(flatbuffers::Verifier &verifier, const void *union_obj, Command type) {
  switch (type) {
    case Command_NONE: return true;
    case Command_Storage_SetRequestCommand: return verifier.VerifyTable(reinterpret_cast<const Storage_SetRequestCommand *>(union_obj));
    default: return false;
  }
}

inline const Message *GetMessage(const void *buf) { return flatbuffers::GetRoot<Message>(buf); }

inline bool VerifyMessageBuffer(flatbuffers::Verifier &verifier) { return verifier.VerifyBuffer<Message>(); }

inline void FinishMessageBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<Message> root) { fbb.Finish(root); }

}  // namespace fbs
}  // namespace ui
}  // namespace samples
}  // namespace hope

#endif  // FLATBUFFERS_GENERATED_MESSAGE_HOPE_SAMPLES_UI_FBS_H_
