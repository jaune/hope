// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_CONSTRUCTIONRECIPETABLE_HOPE_SAMPLES_TOY_FBS_H_
#define FLATBUFFERS_GENERATED_CONSTRUCTIONRECIPETABLE_HOPE_SAMPLES_TOY_FBS_H_

#include "flatbuffers/flatbuffers.h"


namespace hope {
namespace samples {
namespace toy {
namespace fbs {

struct ConstructionRecipeItem;
struct ConstructionRecipe;
struct ConstructionRecipeTable;

struct ConstructionRecipeItem FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  int16_t quantity() const { return GetField<int16_t>(4, 0); }
  int32_t item_id() const { return GetField<int32_t>(6, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int16_t>(verifier, 4 /* quantity */) &&
           VerifyField<int32_t>(verifier, 6 /* item_id */) &&
           verifier.EndTable();
  }
};

struct ConstructionRecipeItemBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_quantity(int16_t quantity) { fbb_.AddElement<int16_t>(4, quantity, 0); }
  void add_item_id(int32_t item_id) { fbb_.AddElement<int32_t>(6, item_id, 0); }
  ConstructionRecipeItemBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  ConstructionRecipeItemBuilder &operator=(const ConstructionRecipeItemBuilder &);
  flatbuffers::Offset<ConstructionRecipeItem> Finish() {
    auto o = flatbuffers::Offset<ConstructionRecipeItem>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<ConstructionRecipeItem> CreateConstructionRecipeItem(flatbuffers::FlatBufferBuilder &_fbb,
   int16_t quantity = 0,
   int32_t item_id = 0) {
  ConstructionRecipeItemBuilder builder_(_fbb);
  builder_.add_item_id(item_id);
  builder_.add_quantity(quantity);
  return builder_.Finish();
}

struct ConstructionRecipe FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  int32_t id() const { return GetField<int32_t>(4, 0); }
  const flatbuffers::String *label() const { return GetPointer<const flatbuffers::String *>(6); }
  int32_t labor() const { return GetField<int32_t>(8, 0); }
  const flatbuffers::Vector<flatbuffers::Offset<ConstructionRecipeItem>> *items() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<ConstructionRecipeItem>> *>(10); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, 4 /* id */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* label */) &&
           verifier.Verify(label()) &&
           VerifyField<int32_t>(verifier, 8 /* labor */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 10 /* items */) &&
           verifier.Verify(items()) &&
           verifier.VerifyVectorOfTables(items()) &&
           verifier.EndTable();
  }
};

struct ConstructionRecipeBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(int32_t id) { fbb_.AddElement<int32_t>(4, id, 0); }
  void add_label(flatbuffers::Offset<flatbuffers::String> label) { fbb_.AddOffset(6, label); }
  void add_labor(int32_t labor) { fbb_.AddElement<int32_t>(8, labor, 0); }
  void add_items(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<ConstructionRecipeItem>>> items) { fbb_.AddOffset(10, items); }
  ConstructionRecipeBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  ConstructionRecipeBuilder &operator=(const ConstructionRecipeBuilder &);
  flatbuffers::Offset<ConstructionRecipe> Finish() {
    auto o = flatbuffers::Offset<ConstructionRecipe>(fbb_.EndTable(start_, 4));
    return o;
  }
};

inline flatbuffers::Offset<ConstructionRecipe> CreateConstructionRecipe(flatbuffers::FlatBufferBuilder &_fbb,
   int32_t id = 0,
   flatbuffers::Offset<flatbuffers::String> label = 0,
   int32_t labor = 0,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<ConstructionRecipeItem>>> items = 0) {
  ConstructionRecipeBuilder builder_(_fbb);
  builder_.add_items(items);
  builder_.add_labor(labor);
  builder_.add_label(label);
  builder_.add_id(id);
  return builder_.Finish();
}

struct ConstructionRecipeTable FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  const flatbuffers::Vector<flatbuffers::Offset<ConstructionRecipe>> *recipes() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<ConstructionRecipe>> *>(4); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* recipes */) &&
           verifier.Verify(recipes()) &&
           verifier.VerifyVectorOfTables(recipes()) &&
           verifier.EndTable();
  }
};

struct ConstructionRecipeTableBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_recipes(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<ConstructionRecipe>>> recipes) { fbb_.AddOffset(4, recipes); }
  ConstructionRecipeTableBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  ConstructionRecipeTableBuilder &operator=(const ConstructionRecipeTableBuilder &);
  flatbuffers::Offset<ConstructionRecipeTable> Finish() {
    auto o = flatbuffers::Offset<ConstructionRecipeTable>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<ConstructionRecipeTable> CreateConstructionRecipeTable(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<ConstructionRecipe>>> recipes = 0) {
  ConstructionRecipeTableBuilder builder_(_fbb);
  builder_.add_recipes(recipes);
  return builder_.Finish();
}

inline const ConstructionRecipeTable *GetConstructionRecipeTable(const void *buf) { return flatbuffers::GetRoot<ConstructionRecipeTable>(buf); }

inline bool VerifyConstructionRecipeTableBuffer(flatbuffers::Verifier &verifier) { return verifier.VerifyBuffer<ConstructionRecipeTable>(); }

inline void FinishConstructionRecipeTableBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<ConstructionRecipeTable> root) { fbb.Finish(root); }

}  // namespace fbs
}  // namespace toy
}  // namespace samples
}  // namespace hope

#endif  // FLATBUFFERS_GENERATED_CONSTRUCTIONRECIPETABLE_HOPE_SAMPLES_TOY_FBS_H_
