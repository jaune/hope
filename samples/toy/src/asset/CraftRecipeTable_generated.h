// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_CRAFTRECIPETABLE_ASSET_FBS_H_
#define FLATBUFFERS_GENERATED_CRAFTRECIPETABLE_ASSET_FBS_H_

#include "flatbuffers/flatbuffers.h"


namespace asset {
namespace fbs {

struct CraftRecipeItem;
struct CraftRecipe;
struct CraftRecipeTable;

struct CraftRecipeItem FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  int16_t quantity() const { return GetField<int16_t>(4, 0); }
  int32_t item_id() const { return GetField<int32_t>(6, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int16_t>(verifier, 4 /* quantity */) &&
           VerifyField<int32_t>(verifier, 6 /* item_id */) &&
           verifier.EndTable();
  }
};

struct CraftRecipeItemBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_quantity(int16_t quantity) { fbb_.AddElement<int16_t>(4, quantity, 0); }
  void add_item_id(int32_t item_id) { fbb_.AddElement<int32_t>(6, item_id, 0); }
  CraftRecipeItemBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  CraftRecipeItemBuilder &operator=(const CraftRecipeItemBuilder &);
  flatbuffers::Offset<CraftRecipeItem> Finish() {
    auto o = flatbuffers::Offset<CraftRecipeItem>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<CraftRecipeItem> CreateCraftRecipeItem(flatbuffers::FlatBufferBuilder &_fbb,
   int16_t quantity = 0,
   int32_t item_id = 0) {
  CraftRecipeItemBuilder builder_(_fbb);
  builder_.add_item_id(item_id);
  builder_.add_quantity(quantity);
  return builder_.Finish();
}

struct CraftRecipe FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  int32_t id() const { return GetField<int32_t>(4, 0); }
  const flatbuffers::String *label() const { return GetPointer<const flatbuffers::String *>(6); }
  int32_t duration() const { return GetField<int32_t>(8, 0); }
  const flatbuffers::Vector<flatbuffers::Offset<CraftRecipeItem>> *input() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<CraftRecipeItem>> *>(10); }
  const flatbuffers::Vector<flatbuffers::Offset<CraftRecipeItem>> *output() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<CraftRecipeItem>> *>(12); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, 4 /* id */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* label */) &&
           verifier.Verify(label()) &&
           VerifyField<int32_t>(verifier, 8 /* duration */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 10 /* input */) &&
           verifier.Verify(input()) &&
           verifier.VerifyVectorOfTables(input()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 12 /* output */) &&
           verifier.Verify(output()) &&
           verifier.VerifyVectorOfTables(output()) &&
           verifier.EndTable();
  }
};

struct CraftRecipeBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(int32_t id) { fbb_.AddElement<int32_t>(4, id, 0); }
  void add_label(flatbuffers::Offset<flatbuffers::String> label) { fbb_.AddOffset(6, label); }
  void add_duration(int32_t duration) { fbb_.AddElement<int32_t>(8, duration, 0); }
  void add_input(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<CraftRecipeItem>>> input) { fbb_.AddOffset(10, input); }
  void add_output(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<CraftRecipeItem>>> output) { fbb_.AddOffset(12, output); }
  CraftRecipeBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  CraftRecipeBuilder &operator=(const CraftRecipeBuilder &);
  flatbuffers::Offset<CraftRecipe> Finish() {
    auto o = flatbuffers::Offset<CraftRecipe>(fbb_.EndTable(start_, 5));
    return o;
  }
};

inline flatbuffers::Offset<CraftRecipe> CreateCraftRecipe(flatbuffers::FlatBufferBuilder &_fbb,
   int32_t id = 0,
   flatbuffers::Offset<flatbuffers::String> label = 0,
   int32_t duration = 0,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<CraftRecipeItem>>> input = 0,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<CraftRecipeItem>>> output = 0) {
  CraftRecipeBuilder builder_(_fbb);
  builder_.add_output(output);
  builder_.add_input(input);
  builder_.add_duration(duration);
  builder_.add_label(label);
  builder_.add_id(id);
  return builder_.Finish();
}

struct CraftRecipeTable FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  const flatbuffers::Vector<flatbuffers::Offset<CraftRecipe>> *recipes() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<CraftRecipe>> *>(4); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* recipes */) &&
           verifier.Verify(recipes()) &&
           verifier.VerifyVectorOfTables(recipes()) &&
           verifier.EndTable();
  }
};

struct CraftRecipeTableBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_recipes(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<CraftRecipe>>> recipes) { fbb_.AddOffset(4, recipes); }
  CraftRecipeTableBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  CraftRecipeTableBuilder &operator=(const CraftRecipeTableBuilder &);
  flatbuffers::Offset<CraftRecipeTable> Finish() {
    auto o = flatbuffers::Offset<CraftRecipeTable>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<CraftRecipeTable> CreateCraftRecipeTable(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<CraftRecipe>>> recipes = 0) {
  CraftRecipeTableBuilder builder_(_fbb);
  builder_.add_recipes(recipes);
  return builder_.Finish();
}

inline const CraftRecipeTable *GetCraftRecipeTable(const void *buf) { return flatbuffers::GetRoot<CraftRecipeTable>(buf); }

inline bool VerifyCraftRecipeTableBuffer(flatbuffers::Verifier &verifier) { return verifier.VerifyBuffer<CraftRecipeTable>(); }

inline void FinishCraftRecipeTableBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<CraftRecipeTable> root) { fbb.Finish(root); }

}  // namespace fbs
}  // namespace asset

#endif  // FLATBUFFERS_GENERATED_CRAFTRECIPETABLE_ASSET_FBS_H_
