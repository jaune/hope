// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_MACHINETABLE_ASSET_FBS_H_
#define FLATBUFFERS_GENERATED_MACHINETABLE_ASSET_FBS_H_

#include "flatbuffers/flatbuffers.h"


namespace asset {
namespace fbs {

struct Machine;
struct MachineTable;

struct Machine FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  int32_t id() const { return GetField<int32_t>(4, 0); }
  const flatbuffers::String *label() const { return GetPointer<const flatbuffers::String *>(6); }
  const flatbuffers::Vector<int32_t> *recipes() const { return GetPointer<const flatbuffers::Vector<int32_t> *>(8); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, 4 /* id */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* label */) &&
           verifier.Verify(label()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 8 /* recipes */) &&
           verifier.Verify(recipes()) &&
           verifier.EndTable();
  }
};

struct MachineBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(int32_t id) { fbb_.AddElement<int32_t>(4, id, 0); }
  void add_label(flatbuffers::Offset<flatbuffers::String> label) { fbb_.AddOffset(6, label); }
  void add_recipes(flatbuffers::Offset<flatbuffers::Vector<int32_t>> recipes) { fbb_.AddOffset(8, recipes); }
  MachineBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  MachineBuilder &operator=(const MachineBuilder &);
  flatbuffers::Offset<Machine> Finish() {
    auto o = flatbuffers::Offset<Machine>(fbb_.EndTable(start_, 3));
    return o;
  }
};

inline flatbuffers::Offset<Machine> CreateMachine(flatbuffers::FlatBufferBuilder &_fbb,
   int32_t id = 0,
   flatbuffers::Offset<flatbuffers::String> label = 0,
   flatbuffers::Offset<flatbuffers::Vector<int32_t>> recipes = 0) {
  MachineBuilder builder_(_fbb);
  builder_.add_recipes(recipes);
  builder_.add_label(label);
  builder_.add_id(id);
  return builder_.Finish();
}

struct MachineTable FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  const flatbuffers::Vector<flatbuffers::Offset<Machine>> *machines() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<Machine>> *>(4); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* machines */) &&
           verifier.Verify(machines()) &&
           verifier.VerifyVectorOfTables(machines()) &&
           verifier.EndTable();
  }
};

struct MachineTableBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_machines(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Machine>>> machines) { fbb_.AddOffset(4, machines); }
  MachineTableBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  MachineTableBuilder &operator=(const MachineTableBuilder &);
  flatbuffers::Offset<MachineTable> Finish() {
    auto o = flatbuffers::Offset<MachineTable>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<MachineTable> CreateMachineTable(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Machine>>> machines = 0) {
  MachineTableBuilder builder_(_fbb);
  builder_.add_machines(machines);
  return builder_.Finish();
}

inline const MachineTable *GetMachineTable(const void *buf) { return flatbuffers::GetRoot<MachineTable>(buf); }

inline bool VerifyMachineTableBuffer(flatbuffers::Verifier &verifier) { return verifier.VerifyBuffer<MachineTable>(); }

inline void FinishMachineTableBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<MachineTable> root) { fbb.Finish(root); }

}  // namespace fbs
}  // namespace asset

#endif  // FLATBUFFERS_GENERATED_MACHINETABLE_ASSET_FBS_H_
